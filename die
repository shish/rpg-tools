#!/usr/bin/python3

import re
import random
import readline


class DieException(Exception):
    pass


class RollSpec(object):
    pattern = re.compile("(\d+)?d(\d+)?(?:\+(\d+))?(!)?(?:([<>])(\d+))?")

    def __init__(self, part):
        m = self.pattern.match(part)

        if m:
            self.n = int(m.group(1) or 1)
            self.d = int(m.group(2) or 6)
            self.p = int(m.group(3) or 0)
            self.explode = m.group(4) == "!"

            self.test = None
            if m.group(5) and m.group(6):
                if m.group(5) == ">":
                    self.test = lambda x: x > int(m.group(6))
                if m.group(5) == "<":
                    self.test = lambda x: x < int(m.group(6))
        else:
            raise DieException("Couldn't recognise a die format")

    def roll(self):
        dice = []
        for dn in range(0, self.n):
            explosions = []
            while True:
                v = random.randint(1, self.d)
                explosions.append(v)
                if not self.explode or v != self.d:
                    break
            if self.test:
                dice.append([self.test(v) for v in explosions])
            else:
                dice.append(explosions)
        return dice


def roll_set(line):
    rolls = [RollSpec(part.strip()) for part in line.split()]
    results = []
    for rollspec in rolls:
        dice = rollspec.roll()

        flat_dice = []
        for n in dice:
            flat_dice.extend(n)
        if rollspec.p:
            print(dice, "=", sum(flat_dice), "+", rollspec.p, "=", sum(flat_dice)+rollspec.p)
        else:
            print(dice, "=", sum(flat_dice))
        results.append(sum(flat_dice)+rollspec.p)
    return results


while True:
    try:
        line = input("die> ")
        results = roll_set(line)
        print("---> max(%d) sum(%d)" % (max(results), sum(results)))
    except DieException as e:
        print(str(e))
    except (EOFError, KeyboardInterrupt):
        break
